// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

contract Verifier {

    /**
     * @notice EZKL P value
     * @dev In order to prevent the verifier from accepting two version of the same pubInput, n and the quantity (n + P),  where n + P <= 2^256, we require that all instances are stricly less than P.
     * @dev The reason for this is that the assmebly code of the verifier performs all arithmetic operations modulo P and as a consequence can't distinguish between n and n + P values.
     */

    uint256 constant SIZE_LIMIT = 21888242871839275222246405745257275088696311157297823662689037894645226208583; 

    function verify(
        uint256[3] calldata instances,
        bytes calldata proof
    ) public view returns (bool) {
        bool success = true;
        bytes32[842] memory transcript;
        for (uint i = 0; i < instances.length; i++) {
            require(instances[i] < SIZE_LIMIT);
        }
        assembly {                    let f_p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47                    let f_q := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001                    function validate_ec_point(x, y) -> valid {                        {                            let x_lt_p := lt(x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let y_lt_p := lt(y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            valid := and(x_lt_p, y_lt_p)                        }                        {                            let y_square := mulmod(y, y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let x_square := mulmod(x, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let x_cube := mulmod(x_square, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let x_cube_plus_3 := addmod(x_cube, 3, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let is_affine := eq(x_cube_plus_3, y_square)                            valid := and(valid, is_affine)                        }                    }                    mstore(0xa0, mod(calldataload(0x4), f_q))mstore(0xc0, mod(calldataload(0x24), f_q))mstore(0xe0, mod(calldataload(0x44), f_q))mstore(0x80, 2074941764025440548078039075847591443295035241188555874216841766230905997066)        {            let x := calldataload(0xa4)            mstore(0x100, x)            let y := calldataload(0xc4)            mstore(0x120, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0xe4)            mstore(0x140, x)            let y := calldataload(0x104)            mstore(0x160, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x124)            mstore(0x180, x)            let y := calldataload(0x144)            mstore(0x1a0, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x1c0, keccak256(0x80, 320)){            let hash := mload(0x1c0)            mstore(0x1e0, mod(hash, f_q))            mstore(0x200, hash)        }        {            let x := calldataload(0x164)            mstore(0x220, x)            let y := calldataload(0x184)            mstore(0x240, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x1a4)            mstore(0x260, x)            let y := calldataload(0x1c4)            mstore(0x280, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x1e4)            mstore(0x2a0, x)            let y := calldataload(0x204)            mstore(0x2c0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x224)            mstore(0x2e0, x)            let y := calldataload(0x244)            mstore(0x300, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x320, keccak256(0x200, 288)){            let hash := mload(0x320)            mstore(0x340, mod(hash, f_q))            mstore(0x360, hash)        }mstore8(0x380, 1)mstore(0x380, keccak256(0x360, 33)){            let hash := mload(0x380)            mstore(0x3a0, mod(hash, f_q))            mstore(0x3c0, hash)        }        {            let x := calldataload(0x264)            mstore(0x3e0, x)            let y := calldataload(0x284)            mstore(0x400, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x2a4)            mstore(0x420, x)            let y := calldataload(0x2c4)            mstore(0x440, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x2e4)            mstore(0x460, x)            let y := calldataload(0x304)            mstore(0x480, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x324)            mstore(0x4a0, x)            let y := calldataload(0x344)            mstore(0x4c0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x364)            mstore(0x4e0, x)            let y := calldataload(0x384)            mstore(0x500, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x520, keccak256(0x3c0, 352)){            let hash := mload(0x520)            mstore(0x540, mod(hash, f_q))            mstore(0x560, hash)        }        {            let x := calldataload(0x3a4)            mstore(0x580, x)            let y := calldataload(0x3c4)            mstore(0x5a0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x3e4)            mstore(0x5c0, x)            let y := calldataload(0x404)            mstore(0x5e0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x424)            mstore(0x600, x)            let y := calldataload(0x444)            mstore(0x620, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x464)            mstore(0x640, x)            let y := calldataload(0x484)            mstore(0x660, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x680, keccak256(0x560, 288)){            let hash := mload(0x680)            mstore(0x6a0, mod(hash, f_q))            mstore(0x6c0, hash)        }mstore(0x6e0, mod(calldataload(0x4a4), f_q))mstore(0x700, mod(calldataload(0x4c4), f_q))mstore(0x720, mod(calldataload(0x4e4), f_q))mstore(0x740, mod(calldataload(0x504), f_q))mstore(0x760, mod(calldataload(0x524), f_q))mstore(0x780, mod(calldataload(0x544), f_q))mstore(0x7a0, mod(calldataload(0x564), f_q))mstore(0x7c0, mod(calldataload(0x584), f_q))mstore(0x7e0, mod(calldataload(0x5a4), f_q))mstore(0x800, mod(calldataload(0x5c4), f_q))mstore(0x820, mod(calldataload(0x5e4), f_q))mstore(0x840, mod(calldataload(0x604), f_q))mstore(0x860, mod(calldataload(0x624), f_q))mstore(0x880, mod(calldataload(0x644), f_q))mstore(0x8a0, mod(calldataload(0x664), f_q))mstore(0x8c0, mod(calldataload(0x684), f_q))mstore(0x8e0, mod(calldataload(0x6a4), f_q))mstore(0x900, mod(calldataload(0x6c4), f_q))mstore(0x920, mod(calldataload(0x6e4), f_q))mstore(0x940, mod(calldataload(0x704), f_q))mstore(0x960, mod(calldataload(0x724), f_q))mstore(0x980, mod(calldataload(0x744), f_q))mstore(0x9a0, mod(calldataload(0x764), f_q))mstore(0x9c0, mod(calldataload(0x784), f_q))mstore(0x9e0, mod(calldataload(0x7a4), f_q))mstore(0xa00, mod(calldataload(0x7c4), f_q))mstore(0xa20, mod(calldataload(0x7e4), f_q))mstore(0xa40, mod(calldataload(0x804), f_q))mstore(0xa60, mod(calldataload(0x824), f_q))mstore(0xa80, mod(calldataload(0x844), f_q))mstore(0xaa0, mod(calldataload(0x864), f_q))mstore(0xac0, mod(calldataload(0x884), f_q))mstore(0xae0, mod(calldataload(0x8a4), f_q))mstore(0xb00, mod(calldataload(0x8c4), f_q))mstore(0xb20, mod(calldataload(0x8e4), f_q))mstore(0xb40, keccak256(0x6c0, 1152)){            let hash := mload(0xb40)            mstore(0xb60, mod(hash, f_q))            mstore(0xb80, hash)        }        {            let x := calldataload(0x904)            mstore(0xba0, x)            let y := calldataload(0x924)            mstore(0xbc0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x944)            mstore(0xbe0, x)            let y := calldataload(0x964)            mstore(0xc00, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x984)            mstore(0xc20, x)            let y := calldataload(0x9a4)            mstore(0xc40, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x9c4)            mstore(0xc60, x)            let y := calldataload(0x9e4)            mstore(0xc80, y)            success := and(validate_ec_point(x, y), success)        }mstore(0xca0, keccak256(0xb80, 288)){            let hash := mload(0xca0)            mstore(0xcc0, mod(hash, f_q))            mstore(0xce0, hash)        }mstore(0xd00, mulmod(mload(0x6a0), mload(0x6a0), f_q))mstore(0xd20, mulmod(mload(0xd00), mload(0xd00), f_q))mstore(0xd40, mulmod(mload(0xd20), mload(0xd20), f_q))mstore(0xd60, mulmod(mload(0xd40), mload(0xd40), f_q))mstore(0xd80, mulmod(mload(0xd60), mload(0xd60), f_q))mstore(0xda0, mulmod(mload(0xd80), mload(0xd80), f_q))mstore(0xdc0, mulmod(mload(0xda0), mload(0xda0), f_q))mstore(0xde0, mulmod(mload(0xdc0), mload(0xdc0), f_q))mstore(0xe00, mulmod(mload(0xde0), mload(0xde0), f_q))mstore(0xe20, mulmod(mload(0xe00), mload(0xe00), f_q))mstore(0xe40, addmod(mload(0xe20), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))mstore(0xe60, mulmod(mload(0xe40), 21866867634659744680037180739646672280844703888306253060159436409049855557633, f_q))mstore(0xe80, mulmod(mload(0xe60), 9936069627611189518829255670237324269287146421271524553312532036927871056678, f_q))mstore(0xea0, addmod(mload(0x6a0), 11952173244228085703417150075019950819261217979144509790385672149647937438939, f_q))mstore(0xec0, mulmod(mload(0xe60), 1680739780407307830605919050682431078078760076686599579086116998224280619988, f_q))mstore(0xee0, addmod(mload(0x6a0), 20207503091431967391640486694574844010469604323729434764612087188351527875629, f_q))mstore(0xf00, mulmod(mload(0xe60), 14158528901797138466244491986759313854666262535363044392173788062030301470987, f_q))mstore(0xf20, addmod(mload(0x6a0), 7729713970042136756001913758497961233882101865052989951524416124545507024630, f_q))mstore(0xf40, mulmod(mload(0xe60), 15699029810934084314820646074566828280617789951162923449200398535581206172418, f_q))mstore(0xf60, addmod(mload(0x6a0), 6189213060905190907425759670690446807930574449253110894497805650994602323199, f_q))mstore(0xf80, mulmod(mload(0xe60), 4260969412351770314333984243767775737437927068151180798236715529158398853173, f_q))mstore(0xfa0, addmod(mload(0x6a0), 17627273459487504907912421501489499351110437332264853545461488657417409642444, f_q))mstore(0xfc0, mulmod(mload(0xe60), 4925592601992654644734291590386747644864797672605745962807370354577123815907, f_q))mstore(0xfe0, addmod(mload(0x6a0), 16962650269846620577512114154870527443683566727810288380890833831998684679710, f_q))mstore(0x1000, mulmod(mload(0xe60), 1, f_q))mstore(0x1020, addmod(mload(0x6a0), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))mstore(0x1040, mulmod(mload(0xe60), 19380560087801265747114831706136320509424814679569278834391540198888293317501, f_q))mstore(0x1060, addmod(mload(0x6a0), 2507682784038009475131574039120954579123549720846755509306663987687515178116, f_q))mstore(0x1080, mulmod(mload(0xe60), 6252951856119339508807713076978770803512896272623217303779254502899773638908, f_q))mstore(0x10a0, addmod(mload(0x6a0), 15635291015719935713438692668278504285035468127792817039918949683676034856709, f_q)){            let prod := mload(0xea0)                prod := mulmod(mload(0xee0), prod, f_q)                mstore(0x10c0, prod)                            prod := mulmod(mload(0xf20), prod, f_q)                mstore(0x10e0, prod)                            prod := mulmod(mload(0xf60), prod, f_q)                mstore(0x1100, prod)                            prod := mulmod(mload(0xfa0), prod, f_q)                mstore(0x1120, prod)                            prod := mulmod(mload(0xfe0), prod, f_q)                mstore(0x1140, prod)                            prod := mulmod(mload(0x1020), prod, f_q)                mstore(0x1160, prod)                            prod := mulmod(mload(0x1060), prod, f_q)                mstore(0x1180, prod)                            prod := mulmod(mload(0x10a0), prod, f_q)                mstore(0x11a0, prod)                            prod := mulmod(mload(0xe40), prod, f_q)                mstore(0x11c0, prod)                    }mstore(0x1200, 32)mstore(0x1220, 32)mstore(0x1240, 32)mstore(0x1260, mload(0x11c0))mstore(0x1280, 21888242871839275222246405745257275088548364400416034343698204186575808495615)mstore(0x12a0, 21888242871839275222246405745257275088548364400416034343698204186575808495617)success := and(eq(staticcall(gas(), 0x5, 0x1200, 0xc0, 0x11e0, 0x20), 1), success){                        let inv := mload(0x11e0)            let v                            v := mload(0xe40)                    mstore(0xe40, mulmod(mload(0x11a0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x10a0)                    mstore(0x10a0, mulmod(mload(0x1180), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1060)                    mstore(0x1060, mulmod(mload(0x1160), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1020)                    mstore(0x1020, mulmod(mload(0x1140), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0xfe0)                    mstore(0xfe0, mulmod(mload(0x1120), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0xfa0)                    mstore(0xfa0, mulmod(mload(0x1100), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0xf60)                    mstore(0xf60, mulmod(mload(0x10e0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0xf20)                    mstore(0xf20, mulmod(mload(0x10c0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0xee0)                    mstore(0xee0, mulmod(mload(0xea0), inv, f_q))                    inv := mulmod(v, inv, f_q)                mstore(0xea0, inv)        }mstore(0x12c0, mulmod(mload(0xe80), mload(0xea0), f_q))mstore(0x12e0, mulmod(mload(0xec0), mload(0xee0), f_q))mstore(0x1300, mulmod(mload(0xf00), mload(0xf20), f_q))mstore(0x1320, mulmod(mload(0xf40), mload(0xf60), f_q))mstore(0x1340, mulmod(mload(0xf80), mload(0xfa0), f_q))mstore(0x1360, mulmod(mload(0xfc0), mload(0xfe0), f_q))mstore(0x1380, mulmod(mload(0x1000), mload(0x1020), f_q))mstore(0x13a0, mulmod(mload(0x1040), mload(0x1060), f_q))mstore(0x13c0, mulmod(mload(0x1080), mload(0x10a0), f_q)){            let result := mulmod(mload(0x1380), mload(0xa0), f_q)result := addmod(mulmod(mload(0x13a0), mload(0xc0), f_q), result, f_q)result := addmod(mulmod(mload(0x13c0), mload(0xe0), f_q), result, f_q)mstore(0x13e0, result)        }mstore(0x1400, addmod(1, sub(f_q, mload(0x820)), f_q))mstore(0x1420, mulmod(mload(0x1400), mload(0x820), f_q))mstore(0x1440, addmod(2, sub(f_q, mload(0x820)), f_q))mstore(0x1460, mulmod(mload(0x1440), mload(0x1420), f_q))mstore(0x1480, mulmod(mload(0x700), mload(0x6e0), f_q))mstore(0x14a0, addmod(mload(0x1480), mload(0x740), f_q))mstore(0x14c0, addmod(mload(0x720), sub(f_q, mload(0x14a0)), f_q))mstore(0x14e0, mulmod(mload(0x14c0), mload(0x1460), f_q))mstore(0x1500, mulmod(mload(0x540), mload(0x14e0), f_q))mstore(0x1520, addmod(2, sub(f_q, mload(0x840)), f_q))mstore(0x1540, mulmod(mload(0x1520), mload(0x840), f_q))mstore(0x1560, addmod(3, sub(f_q, mload(0x840)), f_q))mstore(0x1580, mulmod(mload(0x1560), mload(0x1540), f_q))mstore(0x15a0, mulmod(mload(0x740), mload(0x700), f_q))mstore(0x15c0, addmod(mload(0x720), sub(f_q, mload(0x15a0)), f_q))mstore(0x15e0, mulmod(mload(0x15c0), mload(0x1580), f_q))mstore(0x1600, addmod(mload(0x1500), mload(0x15e0), f_q))mstore(0x1620, mulmod(mload(0x540), mload(0x1600), f_q))mstore(0x1640, addmod(2, sub(f_q, mload(0x880)), f_q))mstore(0x1660, mulmod(mload(0x1640), mload(0x880), f_q))mstore(0x1680, addmod(mload(0x720), sub(f_q, mload(0x700)), f_q))mstore(0x16a0, mulmod(mload(0x1680), mload(0x1660), f_q))mstore(0x16c0, addmod(mload(0x1620), mload(0x16a0), f_q))mstore(0x16e0, mulmod(mload(0x540), mload(0x16c0), f_q))mstore(0x1700, mulmod(mload(0x1440), mload(0x820), f_q))mstore(0x1720, addmod(3, sub(f_q, mload(0x820)), f_q))mstore(0x1740, mulmod(mload(0x1720), mload(0x1700), f_q))mstore(0x1760, addmod(mload(0x6e0), mload(0x700), f_q))mstore(0x1780, addmod(mload(0x720), sub(f_q, mload(0x1760)), f_q))mstore(0x17a0, mulmod(mload(0x1780), mload(0x1740), f_q))mstore(0x17c0, addmod(mload(0x16e0), mload(0x17a0), f_q))mstore(0x17e0, mulmod(mload(0x540), mload(0x17c0), f_q))mstore(0x1800, addmod(2, sub(f_q, mload(0x860)), f_q))mstore(0x1820, mulmod(mload(0x1800), mload(0x860), f_q))mstore(0x1840, addmod(3, sub(f_q, mload(0x860)), f_q))mstore(0x1860, mulmod(mload(0x1840), mload(0x1820), f_q))mstore(0x1880, addmod(mload(0x720), sub(f_q, mload(0x1480)), f_q))mstore(0x18a0, mulmod(mload(0x1880), mload(0x1860), f_q))mstore(0x18c0, addmod(mload(0x17e0), mload(0x18a0), f_q))mstore(0x18e0, mulmod(mload(0x540), mload(0x18c0), f_q))mstore(0x1900, mulmod(mload(0x1720), mload(0x1420), f_q))mstore(0x1920, addmod(mload(0x6e0), sub(f_q, mload(0x700)), f_q))mstore(0x1940, addmod(mload(0x720), sub(f_q, mload(0x1920)), f_q))mstore(0x1960, mulmod(mload(0x1940), mload(0x1900), f_q))mstore(0x1980, addmod(mload(0x18e0), mload(0x1960), f_q))mstore(0x19a0, mulmod(mload(0x540), mload(0x1980), f_q))mstore(0x19c0, addmod(1, sub(f_q, mload(0x840)), f_q))mstore(0x19e0, mulmod(mload(0x19c0), mload(0x840), f_q))mstore(0x1a00, mulmod(mload(0x1560), mload(0x19e0), f_q))mstore(0x1a20, addmod(mload(0x700), mload(0x740), f_q))mstore(0x1a40, addmod(mload(0x720), sub(f_q, mload(0x1a20)), f_q))mstore(0x1a60, mulmod(mload(0x1a40), mload(0x1a00), f_q))mstore(0x1a80, addmod(mload(0x19a0), mload(0x1a60), f_q))mstore(0x1aa0, mulmod(mload(0x540), mload(0x1a80), f_q))mstore(0x1ac0, mulmod(mload(0x1520), mload(0x19e0), f_q))mstore(0x1ae0, addmod(mload(0x720), sub(f_q, sub(f_q, mload(0x700))), f_q))mstore(0x1b00, mulmod(mload(0x1ae0), mload(0x1ac0), f_q))mstore(0x1b20, addmod(mload(0x1aa0), mload(0x1b00), f_q))mstore(0x1b40, mulmod(mload(0x540), mload(0x1b20), f_q))mstore(0x1b60, addmod(1, sub(f_q, mload(0x860)), f_q))mstore(0x1b80, mulmod(mload(0x1b60), mload(0x860), f_q))mstore(0x1ba0, mulmod(mload(0x1840), mload(0x1b80), f_q))mstore(0x1bc0, addmod(mload(0x700), sub(f_q, mload(0x720)), f_q))mstore(0x1be0, mulmod(mload(0x1bc0), mload(0x1ba0), f_q))mstore(0x1c00, addmod(mload(0x1b40), mload(0x1be0), f_q))mstore(0x1c20, mulmod(mload(0x540), mload(0x1c00), f_q))mstore(0x1c40, mulmod(mload(0x1800), mload(0x1b80), f_q))mstore(0x1c60, mulmod(mload(0x700), mload(0x1c40), f_q))mstore(0x1c80, addmod(mload(0x1c20), mload(0x1c60), f_q))mstore(0x1ca0, mulmod(mload(0x540), mload(0x1c80), f_q))mstore(0x1cc0, addmod(1, sub(f_q, mload(0x880)), f_q))mstore(0x1ce0, mulmod(mload(0x1cc0), mload(0x880), f_q))mstore(0x1d00, addmod(mload(0x700), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))mstore(0x1d20, mulmod(mload(0x1d00), mload(0x700), f_q))mstore(0x1d40, mulmod(mload(0x1d20), mload(0x1ce0), f_q))mstore(0x1d60, addmod(mload(0x1ca0), mload(0x1d40), f_q))mstore(0x1d80, mulmod(mload(0x540), mload(0x1d60), f_q))mstore(0x1da0, addmod(1, sub(f_q, mload(0x960)), f_q))mstore(0x1dc0, mulmod(mload(0x1da0), mload(0x1380), f_q))mstore(0x1de0, addmod(mload(0x1d80), mload(0x1dc0), f_q))mstore(0x1e00, mulmod(mload(0x540), mload(0x1de0), f_q))mstore(0x1e20, mulmod(mload(0x9c0), mload(0x9c0), f_q))mstore(0x1e40, addmod(mload(0x1e20), sub(f_q, mload(0x9c0)), f_q))mstore(0x1e60, mulmod(mload(0x1e40), mload(0x12c0), f_q))mstore(0x1e80, addmod(mload(0x1e00), mload(0x1e60), f_q))mstore(0x1ea0, mulmod(mload(0x540), mload(0x1e80), f_q))mstore(0x1ec0, addmod(mload(0x9c0), sub(f_q, mload(0x9a0)), f_q))mstore(0x1ee0, mulmod(mload(0x1ec0), mload(0x1380), f_q))mstore(0x1f00, addmod(mload(0x1ea0), mload(0x1ee0), f_q))mstore(0x1f20, mulmod(mload(0x540), mload(0x1f00), f_q))mstore(0x1f40, addmod(1, sub(f_q, mload(0x12c0)), f_q))mstore(0x1f60, addmod(mload(0x12e0), mload(0x1300), f_q))mstore(0x1f80, addmod(mload(0x1f60), mload(0x1320), f_q))mstore(0x1fa0, addmod(mload(0x1f80), mload(0x1340), f_q))mstore(0x1fc0, addmod(mload(0x1fa0), mload(0x1360), f_q))mstore(0x1fe0, addmod(mload(0x1f40), sub(f_q, mload(0x1fc0)), f_q))mstore(0x2000, mulmod(mload(0x8c0), mload(0x340), f_q))mstore(0x2020, addmod(mload(0x6e0), mload(0x2000), f_q))mstore(0x2040, addmod(mload(0x2020), mload(0x3a0), f_q))mstore(0x2060, mulmod(mload(0x8e0), mload(0x340), f_q))mstore(0x2080, addmod(mload(0x700), mload(0x2060), f_q))mstore(0x20a0, addmod(mload(0x2080), mload(0x3a0), f_q))mstore(0x20c0, mulmod(mload(0x20a0), mload(0x2040), f_q))mstore(0x20e0, mulmod(mload(0x900), mload(0x340), f_q))mstore(0x2100, addmod(mload(0x720), mload(0x20e0), f_q))mstore(0x2120, addmod(mload(0x2100), mload(0x3a0), f_q))mstore(0x2140, mulmod(mload(0x2120), mload(0x20c0), f_q))mstore(0x2160, mulmod(mload(0x2140), mload(0x980), f_q))mstore(0x2180, mulmod(1, mload(0x340), f_q))mstore(0x21a0, mulmod(mload(0x6a0), mload(0x2180), f_q))mstore(0x21c0, addmod(mload(0x6e0), mload(0x21a0), f_q))mstore(0x21e0, addmod(mload(0x21c0), mload(0x3a0), f_q))mstore(0x2200, mulmod(4131629893567559867359510883348571134090853742863529169391034518566172092834, mload(0x340), f_q))mstore(0x2220, mulmod(mload(0x6a0), mload(0x2200), f_q))mstore(0x2240, addmod(mload(0x700), mload(0x2220), f_q))mstore(0x2260, addmod(mload(0x2240), mload(0x3a0), f_q))mstore(0x2280, mulmod(mload(0x2260), mload(0x21e0), f_q))mstore(0x22a0, mulmod(8910878055287538404433155982483128285667088683464058436815641868457422632747, mload(0x340), f_q))mstore(0x22c0, mulmod(mload(0x6a0), mload(0x22a0), f_q))mstore(0x22e0, addmod(mload(0x720), mload(0x22c0), f_q))mstore(0x2300, addmod(mload(0x22e0), mload(0x3a0), f_q))mstore(0x2320, mulmod(mload(0x2300), mload(0x2280), f_q))mstore(0x2340, mulmod(mload(0x2320), mload(0x960), f_q))mstore(0x2360, addmod(mload(0x2160), sub(f_q, mload(0x2340)), f_q))mstore(0x2380, mulmod(mload(0x2360), mload(0x1fe0), f_q))mstore(0x23a0, addmod(mload(0x1f20), mload(0x2380), f_q))mstore(0x23c0, mulmod(mload(0x540), mload(0x23a0), f_q))mstore(0x23e0, mulmod(mload(0x920), mload(0x340), f_q))mstore(0x2400, addmod(mload(0x13e0), mload(0x23e0), f_q))mstore(0x2420, addmod(mload(0x2400), mload(0x3a0), f_q))mstore(0x2440, mulmod(mload(0x940), mload(0x340), f_q))mstore(0x2460, addmod(mload(0x760), mload(0x2440), f_q))mstore(0x2480, addmod(mload(0x2460), mload(0x3a0), f_q))mstore(0x24a0, mulmod(mload(0x2480), mload(0x2420), f_q))mstore(0x24c0, mulmod(mload(0x24a0), mload(0x9e0), f_q))mstore(0x24e0, mulmod(11166246659983828508719468090013646171463329086121580628794302409516816350802, mload(0x340), f_q))mstore(0x2500, mulmod(mload(0x6a0), mload(0x24e0), f_q))mstore(0x2520, addmod(mload(0x13e0), mload(0x2500), f_q))mstore(0x2540, addmod(mload(0x2520), mload(0x3a0), f_q))mstore(0x2560, mulmod(284840088355319032285349970403338060113257071685626700086398481893096618818, mload(0x340), f_q))mstore(0x2580, mulmod(mload(0x6a0), mload(0x2560), f_q))mstore(0x25a0, addmod(mload(0x760), mload(0x2580), f_q))mstore(0x25c0, addmod(mload(0x25a0), mload(0x3a0), f_q))mstore(0x25e0, mulmod(mload(0x25c0), mload(0x2540), f_q))mstore(0x2600, mulmod(mload(0x25e0), mload(0x9c0), f_q))mstore(0x2620, addmod(mload(0x24c0), sub(f_q, mload(0x2600)), f_q))mstore(0x2640, mulmod(mload(0x2620), mload(0x1fe0), f_q))mstore(0x2660, addmod(mload(0x23c0), mload(0x2640), f_q))mstore(0x2680, mulmod(mload(0x540), mload(0x2660), f_q))mstore(0x26a0, addmod(1, sub(f_q, mload(0xa00)), f_q))mstore(0x26c0, mulmod(mload(0x26a0), mload(0x1380), f_q))mstore(0x26e0, addmod(mload(0x2680), mload(0x26c0), f_q))mstore(0x2700, mulmod(mload(0x540), mload(0x26e0), f_q))mstore(0x2720, mulmod(mload(0xa00), mload(0xa00), f_q))mstore(0x2740, addmod(mload(0x2720), sub(f_q, mload(0xa00)), f_q))mstore(0x2760, mulmod(mload(0x2740), mload(0x12c0), f_q))mstore(0x2780, addmod(mload(0x2700), mload(0x2760), f_q))mstore(0x27a0, mulmod(mload(0x540), mload(0x2780), f_q))mstore(0x27c0, addmod(mload(0xa40), mload(0x340), f_q))mstore(0x27e0, mulmod(mload(0x27c0), mload(0xa20), f_q))mstore(0x2800, addmod(mload(0xa80), mload(0x3a0), f_q))mstore(0x2820, mulmod(mload(0x2800), mload(0x27e0), f_q))mstore(0x2840, mulmod(mload(0x6e0), mload(0x7e0), f_q))mstore(0x2860, addmod(1, sub(f_q, mload(0x7e0)), f_q))mstore(0x2880, mulmod(mload(0x2860), 0, f_q))mstore(0x28a0, addmod(mload(0x2840), mload(0x2880), f_q))mstore(0x28c0, mulmod(mload(0x1e0), mload(0x28a0), f_q))mstore(0x28e0, mulmod(mload(0x700), mload(0x7e0), f_q))mstore(0x2900, addmod(mload(0x28e0), mload(0x2880), f_q))mstore(0x2920, addmod(mload(0x28c0), mload(0x2900), f_q))mstore(0x2940, addmod(mload(0x2920), mload(0x340), f_q))mstore(0x2960, mulmod(mload(0x2940), mload(0xa00), f_q))mstore(0x2980, mulmod(mload(0x1e0), mload(0x780), f_q))mstore(0x29a0, addmod(mload(0x2980), mload(0x7a0), f_q))mstore(0x29c0, addmod(mload(0x29a0), mload(0x3a0), f_q))mstore(0x29e0, mulmod(mload(0x29c0), mload(0x2960), f_q))mstore(0x2a00, addmod(mload(0x2820), sub(f_q, mload(0x29e0)), f_q))mstore(0x2a20, mulmod(mload(0x2a00), mload(0x1fe0), f_q))mstore(0x2a40, addmod(mload(0x27a0), mload(0x2a20), f_q))mstore(0x2a60, mulmod(mload(0x540), mload(0x2a40), f_q))mstore(0x2a80, addmod(mload(0xa40), sub(f_q, mload(0xa80)), f_q))mstore(0x2aa0, mulmod(mload(0x2a80), mload(0x1380), f_q))mstore(0x2ac0, addmod(mload(0x2a60), mload(0x2aa0), f_q))mstore(0x2ae0, mulmod(mload(0x540), mload(0x2ac0), f_q))mstore(0x2b00, mulmod(mload(0x2a80), mload(0x1fe0), f_q))mstore(0x2b20, addmod(mload(0xa40), sub(f_q, mload(0xa60)), f_q))mstore(0x2b40, mulmod(mload(0x2b20), mload(0x2b00), f_q))mstore(0x2b60, addmod(mload(0x2ae0), mload(0x2b40), f_q))mstore(0x2b80, mulmod(mload(0x540), mload(0x2b60), f_q))mstore(0x2ba0, addmod(1, sub(f_q, mload(0xaa0)), f_q))mstore(0x2bc0, mulmod(mload(0x2ba0), mload(0x1380), f_q))mstore(0x2be0, addmod(mload(0x2b80), mload(0x2bc0), f_q))mstore(0x2c00, mulmod(mload(0x540), mload(0x2be0), f_q))mstore(0x2c20, mulmod(mload(0xaa0), mload(0xaa0), f_q))mstore(0x2c40, addmod(mload(0x2c20), sub(f_q, mload(0xaa0)), f_q))mstore(0x2c60, mulmod(mload(0x2c40), mload(0x12c0), f_q))mstore(0x2c80, addmod(mload(0x2c00), mload(0x2c60), f_q))mstore(0x2ca0, mulmod(mload(0x540), mload(0x2c80), f_q))mstore(0x2cc0, addmod(mload(0xae0), mload(0x340), f_q))mstore(0x2ce0, mulmod(mload(0x2cc0), mload(0xac0), f_q))mstore(0x2d00, addmod(mload(0xb20), mload(0x3a0), f_q))mstore(0x2d20, mulmod(mload(0x2d00), mload(0x2ce0), f_q))mstore(0x2d40, mulmod(mload(0x6e0), mload(0x800), f_q))mstore(0x2d60, addmod(1, sub(f_q, mload(0x800)), f_q))mstore(0x2d80, mulmod(mload(0x2d60), 0, f_q))mstore(0x2da0, addmod(mload(0x2d40), mload(0x2d80), f_q))mstore(0x2dc0, mulmod(mload(0x1e0), mload(0x2da0), f_q))mstore(0x2de0, mulmod(mload(0x700), mload(0x800), f_q))mstore(0x2e00, addmod(mload(0x2de0), mload(0x2d80), f_q))mstore(0x2e20, addmod(mload(0x2dc0), mload(0x2e00), f_q))mstore(0x2e40, addmod(mload(0x2e20), mload(0x340), f_q))mstore(0x2e60, mulmod(mload(0x2e40), mload(0xaa0), f_q))mstore(0x2e80, addmod(mload(0x2980), mload(0x7c0), f_q))mstore(0x2ea0, addmod(mload(0x2e80), mload(0x3a0), f_q))mstore(0x2ec0, mulmod(mload(0x2ea0), mload(0x2e60), f_q))mstore(0x2ee0, addmod(mload(0x2d20), sub(f_q, mload(0x2ec0)), f_q))mstore(0x2f00, mulmod(mload(0x2ee0), mload(0x1fe0), f_q))mstore(0x2f20, addmod(mload(0x2ca0), mload(0x2f00), f_q))mstore(0x2f40, mulmod(mload(0x540), mload(0x2f20), f_q))mstore(0x2f60, addmod(mload(0xae0), sub(f_q, mload(0xb20)), f_q))mstore(0x2f80, mulmod(mload(0x2f60), mload(0x1380), f_q))mstore(0x2fa0, addmod(mload(0x2f40), mload(0x2f80), f_q))mstore(0x2fc0, mulmod(mload(0x540), mload(0x2fa0), f_q))mstore(0x2fe0, mulmod(mload(0x2f60), mload(0x1fe0), f_q))mstore(0x3000, addmod(mload(0xae0), sub(f_q, mload(0xb00)), f_q))mstore(0x3020, mulmod(mload(0x3000), mload(0x2fe0), f_q))mstore(0x3040, addmod(mload(0x2fc0), mload(0x3020), f_q))mstore(0x3060, mulmod(mload(0xe20), mload(0xe20), f_q))mstore(0x3080, mulmod(mload(0x3060), mload(0xe20), f_q))mstore(0x30a0, mulmod(mload(0x3080), mload(0xe20), f_q))mstore(0x30c0, mulmod(1, mload(0xe20), f_q))mstore(0x30e0, mulmod(1, mload(0x3060), f_q))mstore(0x3100, mulmod(1, mload(0x3080), f_q))mstore(0x3120, mulmod(mload(0x3040), mload(0xe40), f_q))mstore(0x3140, mulmod(mload(0xcc0), mload(0xcc0), f_q))mstore(0x3160, mulmod(mload(0x3140), mload(0xcc0), f_q))mstore(0x3180, mulmod(mload(0x3160), mload(0xcc0), f_q))mstore(0x31a0, mulmod(mload(0xb60), mload(0xb60), f_q))mstore(0x31c0, mulmod(mload(0x31a0), mload(0xb60), f_q))mstore(0x31e0, mulmod(mload(0x31c0), mload(0xb60), f_q))mstore(0x3200, mulmod(mload(0x31e0), mload(0xb60), f_q))mstore(0x3220, mulmod(mload(0x3200), mload(0xb60), f_q))mstore(0x3240, mulmod(mload(0x3220), mload(0xb60), f_q))mstore(0x3260, mulmod(mload(0x3240), mload(0xb60), f_q))mstore(0x3280, mulmod(mload(0x3260), mload(0xb60), f_q))mstore(0x32a0, mulmod(mload(0x3280), mload(0xb60), f_q))mstore(0x32c0, mulmod(mload(0x32a0), mload(0xb60), f_q))mstore(0x32e0, mulmod(mload(0x32c0), mload(0xb60), f_q))mstore(0x3300, mulmod(mload(0x32e0), mload(0xb60), f_q))mstore(0x3320, mulmod(mload(0x3300), mload(0xb60), f_q))mstore(0x3340, mulmod(mload(0x3320), mload(0xb60), f_q))mstore(0x3360, mulmod(mload(0x3340), mload(0xb60), f_q))mstore(0x3380, mulmod(mload(0x3360), mload(0xb60), f_q))mstore(0x33a0, mulmod(mload(0x3380), mload(0xb60), f_q))mstore(0x33c0, mulmod(mload(0x33a0), mload(0xb60), f_q))mstore(0x33e0, mulmod(mload(0x33c0), mload(0xb60), f_q))mstore(0x3400, mulmod(mload(0x33e0), mload(0xb60), f_q))mstore(0x3420, mulmod(mload(0x3400), mload(0xb60), f_q))mstore(0x3440, mulmod(mload(0x3420), mload(0xb60), f_q))mstore(0x3460, mulmod(mload(0x3440), mload(0xb60), f_q))mstore(0x3480, mulmod(mload(0x3460), mload(0xb60), f_q))mstore(0x34a0, mulmod(mload(0x3480), mload(0xb60), f_q))mstore(0x34c0, mulmod(mload(0x34a0), mload(0xb60), f_q))mstore(0x34e0, mulmod(mload(0x34c0), mload(0xb60), f_q))mstore(0x3500, mulmod(sub(f_q, mload(0x6e0)), 1, f_q))mstore(0x3520, mulmod(sub(f_q, mload(0x700)), mload(0xb60), f_q))mstore(0x3540, mulmod(1, mload(0xb60), f_q))mstore(0x3560, addmod(mload(0x3500), mload(0x3520), f_q))mstore(0x3580, mulmod(sub(f_q, mload(0x720)), mload(0x31a0), f_q))mstore(0x35a0, mulmod(1, mload(0x31a0), f_q))mstore(0x35c0, addmod(mload(0x3560), mload(0x3580), f_q))mstore(0x35e0, mulmod(sub(f_q, mload(0x960)), mload(0x31c0), f_q))mstore(0x3600, mulmod(1, mload(0x31c0), f_q))mstore(0x3620, addmod(mload(0x35c0), mload(0x35e0), f_q))mstore(0x3640, mulmod(sub(f_q, mload(0x9c0)), mload(0x31e0), f_q))mstore(0x3660, mulmod(1, mload(0x31e0), f_q))mstore(0x3680, addmod(mload(0x3620), mload(0x3640), f_q))mstore(0x36a0, mulmod(sub(f_q, mload(0xa00)), mload(0x3200), f_q))mstore(0x36c0, mulmod(1, mload(0x3200), f_q))mstore(0x36e0, addmod(mload(0x3680), mload(0x36a0), f_q))mstore(0x3700, mulmod(sub(f_q, mload(0xa40)), mload(0x3220), f_q))mstore(0x3720, mulmod(1, mload(0x3220), f_q))mstore(0x3740, addmod(mload(0x36e0), mload(0x3700), f_q))mstore(0x3760, mulmod(sub(f_q, mload(0xa80)), mload(0x3240), f_q))mstore(0x3780, mulmod(1, mload(0x3240), f_q))mstore(0x37a0, addmod(mload(0x3740), mload(0x3760), f_q))mstore(0x37c0, mulmod(sub(f_q, mload(0xaa0)), mload(0x3260), f_q))mstore(0x37e0, mulmod(1, mload(0x3260), f_q))mstore(0x3800, addmod(mload(0x37a0), mload(0x37c0), f_q))mstore(0x3820, mulmod(sub(f_q, mload(0xae0)), mload(0x3280), f_q))mstore(0x3840, mulmod(1, mload(0x3280), f_q))mstore(0x3860, addmod(mload(0x3800), mload(0x3820), f_q))mstore(0x3880, mulmod(sub(f_q, mload(0xb20)), mload(0x32a0), f_q))mstore(0x38a0, mulmod(1, mload(0x32a0), f_q))mstore(0x38c0, addmod(mload(0x3860), mload(0x3880), f_q))mstore(0x38e0, mulmod(sub(f_q, mload(0x760)), mload(0x32c0), f_q))mstore(0x3900, mulmod(1, mload(0x32c0), f_q))mstore(0x3920, addmod(mload(0x38c0), mload(0x38e0), f_q))mstore(0x3940, mulmod(sub(f_q, mload(0x780)), mload(0x32e0), f_q))mstore(0x3960, mulmod(1, mload(0x32e0), f_q))mstore(0x3980, addmod(mload(0x3920), mload(0x3940), f_q))mstore(0x39a0, mulmod(sub(f_q, mload(0x7a0)), mload(0x3300), f_q))mstore(0x39c0, mulmod(1, mload(0x3300), f_q))mstore(0x39e0, addmod(mload(0x3980), mload(0x39a0), f_q))mstore(0x3a00, mulmod(sub(f_q, mload(0x7c0)), mload(0x3320), f_q))mstore(0x3a20, mulmod(1, mload(0x3320), f_q))mstore(0x3a40, addmod(mload(0x39e0), mload(0x3a00), f_q))mstore(0x3a60, mulmod(sub(f_q, mload(0x7e0)), mload(0x3340), f_q))mstore(0x3a80, mulmod(1, mload(0x3340), f_q))mstore(0x3aa0, addmod(mload(0x3a40), mload(0x3a60), f_q))mstore(0x3ac0, mulmod(sub(f_q, mload(0x800)), mload(0x3360), f_q))mstore(0x3ae0, mulmod(1, mload(0x3360), f_q))mstore(0x3b00, addmod(mload(0x3aa0), mload(0x3ac0), f_q))mstore(0x3b20, mulmod(sub(f_q, mload(0x820)), mload(0x3380), f_q))mstore(0x3b40, mulmod(1, mload(0x3380), f_q))mstore(0x3b60, addmod(mload(0x3b00), mload(0x3b20), f_q))mstore(0x3b80, mulmod(sub(f_q, mload(0x840)), mload(0x33a0), f_q))mstore(0x3ba0, mulmod(1, mload(0x33a0), f_q))mstore(0x3bc0, addmod(mload(0x3b60), mload(0x3b80), f_q))mstore(0x3be0, addmod(mload(0x3900), mload(0x3ba0), f_q))mstore(0x3c00, mulmod(sub(f_q, mload(0x860)), mload(0x33c0), f_q))mstore(0x3c20, mulmod(1, mload(0x33c0), f_q))mstore(0x3c40, addmod(mload(0x3bc0), mload(0x3c00), f_q))mstore(0x3c60, mulmod(sub(f_q, mload(0x880)), mload(0x33e0), f_q))mstore(0x3c80, mulmod(1, mload(0x33e0), f_q))mstore(0x3ca0, addmod(mload(0x3c40), mload(0x3c60), f_q))mstore(0x3cc0, addmod(mload(0x3be0), mload(0x3c80), f_q))mstore(0x3ce0, mulmod(sub(f_q, mload(0x8c0)), mload(0x3400), f_q))mstore(0x3d00, mulmod(1, mload(0x3400), f_q))mstore(0x3d20, addmod(mload(0x3ca0), mload(0x3ce0), f_q))mstore(0x3d40, mulmod(sub(f_q, mload(0x8e0)), mload(0x3420), f_q))mstore(0x3d60, mulmod(1, mload(0x3420), f_q))mstore(0x3d80, addmod(mload(0x3d20), mload(0x3d40), f_q))mstore(0x3da0, mulmod(sub(f_q, mload(0x900)), mload(0x3440), f_q))mstore(0x3dc0, mulmod(1, mload(0x3440), f_q))mstore(0x3de0, addmod(mload(0x3d80), mload(0x3da0), f_q))mstore(0x3e00, mulmod(sub(f_q, mload(0x920)), mload(0x3460), f_q))mstore(0x3e20, mulmod(1, mload(0x3460), f_q))mstore(0x3e40, addmod(mload(0x3de0), mload(0x3e00), f_q))mstore(0x3e60, mulmod(sub(f_q, mload(0x940)), mload(0x3480), f_q))mstore(0x3e80, mulmod(1, mload(0x3480), f_q))mstore(0x3ea0, addmod(mload(0x3e40), mload(0x3e60), f_q))mstore(0x3ec0, mulmod(sub(f_q, mload(0x3120)), mload(0x34a0), f_q))mstore(0x3ee0, mulmod(1, mload(0x34a0), f_q))mstore(0x3f00, mulmod(mload(0x30c0), mload(0x34a0), f_q))mstore(0x3f20, mulmod(mload(0x30e0), mload(0x34a0), f_q))mstore(0x3f40, mulmod(mload(0x3100), mload(0x34a0), f_q))mstore(0x3f60, addmod(mload(0x3ea0), mload(0x3ec0), f_q))mstore(0x3f80, mulmod(sub(f_q, mload(0x8a0)), mload(0x34c0), f_q))mstore(0x3fa0, mulmod(1, mload(0x34c0), f_q))mstore(0x3fc0, addmod(mload(0x3f60), mload(0x3f80), f_q))mstore(0x3fe0, mulmod(mload(0x3fc0), 1, f_q))mstore(0x4000, mulmod(mload(0x3540), 1, f_q))mstore(0x4020, mulmod(mload(0x35a0), 1, f_q))mstore(0x4040, mulmod(mload(0x3600), 1, f_q))mstore(0x4060, mulmod(mload(0x3660), 1, f_q))mstore(0x4080, mulmod(mload(0x36c0), 1, f_q))mstore(0x40a0, mulmod(mload(0x3720), 1, f_q))mstore(0x40c0, mulmod(mload(0x3780), 1, f_q))mstore(0x40e0, mulmod(mload(0x37e0), 1, f_q))mstore(0x4100, mulmod(mload(0x3840), 1, f_q))mstore(0x4120, mulmod(mload(0x38a0), 1, f_q))mstore(0x4140, mulmod(mload(0x3cc0), 1, f_q))mstore(0x4160, mulmod(mload(0x3960), 1, f_q))mstore(0x4180, mulmod(mload(0x39c0), 1, f_q))mstore(0x41a0, mulmod(mload(0x3a20), 1, f_q))mstore(0x41c0, mulmod(mload(0x3a80), 1, f_q))mstore(0x41e0, mulmod(mload(0x3ae0), 1, f_q))mstore(0x4200, mulmod(mload(0x3b40), 1, f_q))mstore(0x4220, mulmod(mload(0x3c20), 1, f_q))mstore(0x4240, mulmod(mload(0x3d00), 1, f_q))mstore(0x4260, mulmod(mload(0x3d60), 1, f_q))mstore(0x4280, mulmod(mload(0x3dc0), 1, f_q))mstore(0x42a0, mulmod(mload(0x3e20), 1, f_q))mstore(0x42c0, mulmod(mload(0x3e80), 1, f_q))mstore(0x42e0, mulmod(mload(0x3ee0), 1, f_q))mstore(0x4300, mulmod(mload(0x3f00), 1, f_q))mstore(0x4320, mulmod(mload(0x3f20), 1, f_q))mstore(0x4340, mulmod(mload(0x3f40), 1, f_q))mstore(0x4360, mulmod(mload(0x3fa0), 1, f_q))mstore(0x4380, mulmod(sub(f_q, mload(0x740)), 1, f_q))mstore(0x43a0, mulmod(sub(f_q, mload(0xa60)), mload(0xb60), f_q))mstore(0x43c0, addmod(mload(0x4380), mload(0x43a0), f_q))mstore(0x43e0, mulmod(sub(f_q, mload(0xb00)), mload(0x31a0), f_q))mstore(0x4400, addmod(mload(0x43c0), mload(0x43e0), f_q))mstore(0x4420, mulmod(mload(0x4400), mload(0xcc0), f_q))mstore(0x4440, mulmod(1, mload(0xcc0), f_q))mstore(0x4460, mulmod(mload(0x3540), mload(0xcc0), f_q))mstore(0x4480, mulmod(mload(0x35a0), mload(0xcc0), f_q))mstore(0x44a0, addmod(mload(0x3fe0), mload(0x4420), f_q))mstore(0x44c0, addmod(mload(0x4020), mload(0x4440), f_q))mstore(0x44e0, addmod(mload(0x40a0), mload(0x4460), f_q))mstore(0x4500, addmod(mload(0x4100), mload(0x4480), f_q))mstore(0x4520, mulmod(sub(f_q, mload(0x980)), 1, f_q))mstore(0x4540, mulmod(sub(f_q, mload(0x9e0)), mload(0xb60), f_q))mstore(0x4560, addmod(mload(0x4520), mload(0x4540), f_q))mstore(0x4580, mulmod(sub(f_q, mload(0xa20)), mload(0x31a0), f_q))mstore(0x45a0, addmod(mload(0x4560), mload(0x4580), f_q))mstore(0x45c0, mulmod(sub(f_q, mload(0xac0)), mload(0x31c0), f_q))mstore(0x45e0, addmod(mload(0x45a0), mload(0x45c0), f_q))mstore(0x4600, mulmod(mload(0x45e0), mload(0x3140), f_q))mstore(0x4620, mulmod(1, mload(0x3140), f_q))mstore(0x4640, mulmod(mload(0x3540), mload(0x3140), f_q))mstore(0x4660, mulmod(mload(0x35a0), mload(0x3140), f_q))mstore(0x4680, mulmod(mload(0x3600), mload(0x3140), f_q))mstore(0x46a0, addmod(mload(0x44a0), mload(0x4600), f_q))mstore(0x46c0, addmod(mload(0x4040), mload(0x4620), f_q))mstore(0x46e0, addmod(mload(0x4060), mload(0x4640), f_q))mstore(0x4700, addmod(mload(0x4080), mload(0x4660), f_q))mstore(0x4720, addmod(mload(0x40e0), mload(0x4680), f_q))mstore(0x4740, mulmod(sub(f_q, mload(0x9a0)), 1, f_q))mstore(0x4760, mulmod(mload(0x4740), mload(0x3160), f_q))mstore(0x4780, mulmod(1, mload(0x3160), f_q))mstore(0x47a0, addmod(mload(0x46a0), mload(0x4760), f_q))mstore(0x47c0, addmod(mload(0x46c0), mload(0x4780), f_q))mstore(0x47e0, mulmod(1, mload(0x6a0), f_q))mstore(0x4800, mulmod(1, mload(0x47e0), f_q))mstore(0x4820, mulmod(4925592601992654644734291590386747644864797672605745962807370354577123815907, mload(0x6a0), f_q))mstore(0x4840, mulmod(mload(0x4440), mload(0x4820), f_q))mstore(0x4860, mulmod(19380560087801265747114831706136320509424814679569278834391540198888293317501, mload(0x6a0), f_q))mstore(0x4880, mulmod(mload(0x4620), mload(0x4860), f_q))mstore(0x48a0, mulmod(9936069627611189518829255670237324269287146421271524553312532036927871056678, mload(0x6a0), f_q))mstore(0x48c0, mulmod(mload(0x4780), mload(0x48a0), f_q))mstore(0x48e0, 0x0000000000000000000000000000000000000000000000000000000000000001)                    mstore(0x4900, 0x0000000000000000000000000000000000000000000000000000000000000002)mstore(0x4920, mload(0x47a0))success := and(eq(staticcall(gas(), 0x7, 0x48e0, 0x60, 0x48e0, 0x40), 1), success)mstore(0x4940, mload(0x48e0))                    mstore(0x4960, mload(0x4900))mstore(0x4980, mload(0x100))                    mstore(0x49a0, mload(0x120))success := and(eq(staticcall(gas(), 0x6, 0x4940, 0x80, 0x4940, 0x40), 1), success)mstore(0x49c0, mload(0x140))                    mstore(0x49e0, mload(0x160))mstore(0x4a00, mload(0x4000))success := and(eq(staticcall(gas(), 0x7, 0x49c0, 0x60, 0x49c0, 0x40), 1), success)mstore(0x4a20, mload(0x4940))                    mstore(0x4a40, mload(0x4960))mstore(0x4a60, mload(0x49c0))                    mstore(0x4a80, mload(0x49e0))success := and(eq(staticcall(gas(), 0x6, 0x4a20, 0x80, 0x4a20, 0x40), 1), success)mstore(0x4aa0, mload(0x180))                    mstore(0x4ac0, mload(0x1a0))mstore(0x4ae0, mload(0x44c0))success := and(eq(staticcall(gas(), 0x7, 0x4aa0, 0x60, 0x4aa0, 0x40), 1), success)mstore(0x4b00, mload(0x4a20))                    mstore(0x4b20, mload(0x4a40))mstore(0x4b40, mload(0x4aa0))                    mstore(0x4b60, mload(0x4ac0))success := and(eq(staticcall(gas(), 0x6, 0x4b00, 0x80, 0x4b00, 0x40), 1), success)mstore(0x4b80, mload(0x3e0))                    mstore(0x4ba0, mload(0x400))mstore(0x4bc0, mload(0x47c0))success := and(eq(staticcall(gas(), 0x7, 0x4b80, 0x60, 0x4b80, 0x40), 1), success)mstore(0x4be0, mload(0x4b00))                    mstore(0x4c00, mload(0x4b20))mstore(0x4c20, mload(0x4b80))                    mstore(0x4c40, mload(0x4ba0))success := and(eq(staticcall(gas(), 0x6, 0x4be0, 0x80, 0x4be0, 0x40), 1), success)mstore(0x4c60, mload(0x420))                    mstore(0x4c80, mload(0x440))mstore(0x4ca0, mload(0x46e0))success := and(eq(staticcall(gas(), 0x7, 0x4c60, 0x60, 0x4c60, 0x40), 1), success)mstore(0x4cc0, mload(0x4be0))                    mstore(0x4ce0, mload(0x4c00))mstore(0x4d00, mload(0x4c60))                    mstore(0x4d20, mload(0x4c80))success := and(eq(staticcall(gas(), 0x6, 0x4cc0, 0x80, 0x4cc0, 0x40), 1), success)mstore(0x4d40, mload(0x460))                    mstore(0x4d60, mload(0x480))mstore(0x4d80, mload(0x4700))success := and(eq(staticcall(gas(), 0x7, 0x4d40, 0x60, 0x4d40, 0x40), 1), success)mstore(0x4da0, mload(0x4cc0))                    mstore(0x4dc0, mload(0x4ce0))mstore(0x4de0, mload(0x4d40))                    mstore(0x4e00, mload(0x4d60))success := and(eq(staticcall(gas(), 0x6, 0x4da0, 0x80, 0x4da0, 0x40), 1), success)mstore(0x4e20, mload(0x220))                    mstore(0x4e40, mload(0x240))mstore(0x4e60, mload(0x44e0))success := and(eq(staticcall(gas(), 0x7, 0x4e20, 0x60, 0x4e20, 0x40), 1), success)mstore(0x4e80, mload(0x4da0))                    mstore(0x4ea0, mload(0x4dc0))mstore(0x4ec0, mload(0x4e20))                    mstore(0x4ee0, mload(0x4e40))success := and(eq(staticcall(gas(), 0x6, 0x4e80, 0x80, 0x4e80, 0x40), 1), success)mstore(0x4f00, mload(0x260))                    mstore(0x4f20, mload(0x280))mstore(0x4f40, mload(0x40c0))success := and(eq(staticcall(gas(), 0x7, 0x4f00, 0x60, 0x4f00, 0x40), 1), success)mstore(0x4f60, mload(0x4e80))                    mstore(0x4f80, mload(0x4ea0))mstore(0x4fa0, mload(0x4f00))                    mstore(0x4fc0, mload(0x4f20))success := and(eq(staticcall(gas(), 0x6, 0x4f60, 0x80, 0x4f60, 0x40), 1), success)mstore(0x4fe0, mload(0x4a0))                    mstore(0x5000, mload(0x4c0))mstore(0x5020, mload(0x4720))success := and(eq(staticcall(gas(), 0x7, 0x4fe0, 0x60, 0x4fe0, 0x40), 1), success)mstore(0x5040, mload(0x4f60))                    mstore(0x5060, mload(0x4f80))mstore(0x5080, mload(0x4fe0))                    mstore(0x50a0, mload(0x5000))success := and(eq(staticcall(gas(), 0x6, 0x5040, 0x80, 0x5040, 0x40), 1), success)mstore(0x50c0, mload(0x2a0))                    mstore(0x50e0, mload(0x2c0))mstore(0x5100, mload(0x4500))success := and(eq(staticcall(gas(), 0x7, 0x50c0, 0x60, 0x50c0, 0x40), 1), success)mstore(0x5120, mload(0x5040))                    mstore(0x5140, mload(0x5060))mstore(0x5160, mload(0x50c0))                    mstore(0x5180, mload(0x50e0))success := and(eq(staticcall(gas(), 0x6, 0x5120, 0x80, 0x5120, 0x40), 1), success)mstore(0x51a0, mload(0x2e0))                    mstore(0x51c0, mload(0x300))mstore(0x51e0, mload(0x4120))success := and(eq(staticcall(gas(), 0x7, 0x51a0, 0x60, 0x51a0, 0x40), 1), success)mstore(0x5200, mload(0x5120))                    mstore(0x5220, mload(0x5140))mstore(0x5240, mload(0x51a0))                    mstore(0x5260, mload(0x51c0))success := and(eq(staticcall(gas(), 0x6, 0x5200, 0x80, 0x5200, 0x40), 1), success)mstore(0x5280, 0x0000000000000000000000000000000000000000000000000000000000000000)                    mstore(0x52a0, 0x0000000000000000000000000000000000000000000000000000000000000000)mstore(0x52c0, mload(0x4140))success := and(eq(staticcall(gas(), 0x7, 0x5280, 0x60, 0x5280, 0x40), 1), success)mstore(0x52e0, mload(0x5200))                    mstore(0x5300, mload(0x5220))mstore(0x5320, mload(0x5280))                    mstore(0x5340, mload(0x52a0))success := and(eq(staticcall(gas(), 0x6, 0x52e0, 0x80, 0x52e0, 0x40), 1), success)mstore(0x5360, 0x0f9042466dc09a1e9ca605c59dfe6df60a00d992065756c3ffa8f76affad82fc)                    mstore(0x5380, 0x0cd8d640e96d32277af80bef75e1d4fbc36ec46901a05118bbaeba547fb29b3d)mstore(0x53a0, mload(0x4160))success := and(eq(staticcall(gas(), 0x7, 0x5360, 0x60, 0x5360, 0x40), 1), success)mstore(0x53c0, mload(0x52e0))                    mstore(0x53e0, mload(0x5300))mstore(0x5400, mload(0x5360))                    mstore(0x5420, mload(0x5380))success := and(eq(staticcall(gas(), 0x6, 0x53c0, 0x80, 0x53c0, 0x40), 1), success)mstore(0x5440, 0x177be5b0e44c1c2e376388196bd6928c2471f58d61604d9afd94e6e221cf35e0)                    mstore(0x5460, 0x125d6bf3197cc54f46989353c4344b10f8578c50c2566212ebd83045c7ba1762)mstore(0x5480, mload(0x4180))success := and(eq(staticcall(gas(), 0x7, 0x5440, 0x60, 0x5440, 0x40), 1), success)mstore(0x54a0, mload(0x53c0))                    mstore(0x54c0, mload(0x53e0))mstore(0x54e0, mload(0x5440))                    mstore(0x5500, mload(0x5460))success := and(eq(staticcall(gas(), 0x6, 0x54a0, 0x80, 0x54a0, 0x40), 1), success)mstore(0x5520, 0x26a6a5867034e62483e52026c103a75317c243120b450fd9a30f19b1d69b035a)                    mstore(0x5540, 0x267c79ecb14d64e85ebe21ed9fbad5f5fed8f9095ebb00b9fcd1c65a6a805a2e)mstore(0x5560, mload(0x41a0))success := and(eq(staticcall(gas(), 0x7, 0x5520, 0x60, 0x5520, 0x40), 1), success)mstore(0x5580, mload(0x54a0))                    mstore(0x55a0, mload(0x54c0))mstore(0x55c0, mload(0x5520))                    mstore(0x55e0, mload(0x5540))success := and(eq(staticcall(gas(), 0x6, 0x5580, 0x80, 0x5580, 0x40), 1), success)mstore(0x5600, 0x2136ec481fc8edcea6fffeca254941bfb5f15898a53b01a537ffeffe123b06c9)                    mstore(0x5620, 0x0b862a5e4d6b42b791871263059f1a28ea4a7893e1bd459d5049a82bc57f5a06)mstore(0x5640, mload(0x41c0))success := and(eq(staticcall(gas(), 0x7, 0x5600, 0x60, 0x5600, 0x40), 1), success)mstore(0x5660, mload(0x5580))                    mstore(0x5680, mload(0x55a0))mstore(0x56a0, mload(0x5600))                    mstore(0x56c0, mload(0x5620))success := and(eq(staticcall(gas(), 0x6, 0x5660, 0x80, 0x5660, 0x40), 1), success)mstore(0x56e0, 0x15f8b046ee7c2f5668727b10374eb06c923fe0e42886dbf18aa00bad01ed9a22)                    mstore(0x5700, 0x1ea68f8375a444518d2497b03332d07463c544a08dab7ba6bca859110b12837e)mstore(0x5720, mload(0x41e0))success := and(eq(staticcall(gas(), 0x7, 0x56e0, 0x60, 0x56e0, 0x40), 1), success)mstore(0x5740, mload(0x5660))                    mstore(0x5760, mload(0x5680))mstore(0x5780, mload(0x56e0))                    mstore(0x57a0, mload(0x5700))success := and(eq(staticcall(gas(), 0x6, 0x5740, 0x80, 0x5740, 0x40), 1), success)mstore(0x57c0, 0x065dcd1beb3c5868e242a156784f848bb3d778cf8a05622809b4d9f2d2096154)                    mstore(0x57e0, 0x0b88b2eb73a0fb1a49a465b400d526772661ebcba9b6e3438eec608f08952f42)mstore(0x5800, mload(0x4200))success := and(eq(staticcall(gas(), 0x7, 0x57c0, 0x60, 0x57c0, 0x40), 1), success)mstore(0x5820, mload(0x5740))                    mstore(0x5840, mload(0x5760))mstore(0x5860, mload(0x57c0))                    mstore(0x5880, mload(0x57e0))success := and(eq(staticcall(gas(), 0x6, 0x5820, 0x80, 0x5820, 0x40), 1), success)mstore(0x58a0, 0x0d47df9bda6fe8e49ebb3f579f43207527054138cb2350046500fc3f71868cc7)                    mstore(0x58c0, 0x29fae04dd808eeebabf2ddcb9535516dba606abed6980930188e9aca5ad02a37)mstore(0x58e0, mload(0x4220))success := and(eq(staticcall(gas(), 0x7, 0x58a0, 0x60, 0x58a0, 0x40), 1), success)mstore(0x5900, mload(0x5820))                    mstore(0x5920, mload(0x5840))mstore(0x5940, mload(0x58a0))                    mstore(0x5960, mload(0x58c0))success := and(eq(staticcall(gas(), 0x6, 0x5900, 0x80, 0x5900, 0x40), 1), success)mstore(0x5980, 0x2e4356b16921369b4927592aa64fc0395bdcb3eb3b9e714a947a60af32c9f44f)                    mstore(0x59a0, 0x26977a6e8f74af7bf858dec97e849b6d907adcd041be11bdfae812b36513948d)mstore(0x59c0, mload(0x4240))success := and(eq(staticcall(gas(), 0x7, 0x5980, 0x60, 0x5980, 0x40), 1), success)mstore(0x59e0, mload(0x5900))                    mstore(0x5a00, mload(0x5920))mstore(0x5a20, mload(0x5980))                    mstore(0x5a40, mload(0x59a0))success := and(eq(staticcall(gas(), 0x6, 0x59e0, 0x80, 0x59e0, 0x40), 1), success)mstore(0x5a60, 0x2bcb96868b1cd65f4fa839b6d02689d86d60bc4dfc4fd8a074f5b77385c1e2ff)                    mstore(0x5a80, 0x1f4d771a8336b7c0d1cce0a25b50b43bc83ab4b8ae21e542f93a30ba33ba1710)mstore(0x5aa0, mload(0x4260))success := and(eq(staticcall(gas(), 0x7, 0x5a60, 0x60, 0x5a60, 0x40), 1), success)mstore(0x5ac0, mload(0x59e0))                    mstore(0x5ae0, mload(0x5a00))mstore(0x5b00, mload(0x5a60))                    mstore(0x5b20, mload(0x5a80))success := and(eq(staticcall(gas(), 0x6, 0x5ac0, 0x80, 0x5ac0, 0x40), 1), success)mstore(0x5b40, 0x0e56889fca3766ccdcaf82c5043338d8d2f2ded64c79f88df49561e06a19545d)                    mstore(0x5b60, 0x275c9bb6bb7396b70a89405be19cac4a223c8f463b48b58442c20c7c12e4293b)mstore(0x5b80, mload(0x4280))success := and(eq(staticcall(gas(), 0x7, 0x5b40, 0x60, 0x5b40, 0x40), 1), success)mstore(0x5ba0, mload(0x5ac0))                    mstore(0x5bc0, mload(0x5ae0))mstore(0x5be0, mload(0x5b40))                    mstore(0x5c00, mload(0x5b60))success := and(eq(staticcall(gas(), 0x6, 0x5ba0, 0x80, 0x5ba0, 0x40), 1), success)mstore(0x5c20, 0x2a1b2192636553e87a35b0c324c30f2ec8ff1375ebec7a92772e272d0e524d7a)                    mstore(0x5c40, 0x0bb87eeb55732323a9c9846e69cdbb1b65581ff6fcb5950be61010017cc9e2b9)mstore(0x5c60, mload(0x42a0))success := and(eq(staticcall(gas(), 0x7, 0x5c20, 0x60, 0x5c20, 0x40), 1), success)mstore(0x5c80, mload(0x5ba0))                    mstore(0x5ca0, mload(0x5bc0))mstore(0x5cc0, mload(0x5c20))                    mstore(0x5ce0, mload(0x5c40))success := and(eq(staticcall(gas(), 0x6, 0x5c80, 0x80, 0x5c80, 0x40), 1), success)mstore(0x5d00, 0x088931b6933831d6899ae7ce9a1052284545afff9f21a235e61ad1decbf06f9f)                    mstore(0x5d20, 0x248c0912aa97d903345b691d643dc9407aca9dab62bf3fa8dd2200c1283c4a5c)mstore(0x5d40, mload(0x42c0))success := and(eq(staticcall(gas(), 0x7, 0x5d00, 0x60, 0x5d00, 0x40), 1), success)mstore(0x5d60, mload(0x5c80))                    mstore(0x5d80, mload(0x5ca0))mstore(0x5da0, mload(0x5d00))                    mstore(0x5dc0, mload(0x5d20))success := and(eq(staticcall(gas(), 0x6, 0x5d60, 0x80, 0x5d60, 0x40), 1), success)mstore(0x5de0, mload(0x580))                    mstore(0x5e00, mload(0x5a0))mstore(0x5e20, mload(0x42e0))success := and(eq(staticcall(gas(), 0x7, 0x5de0, 0x60, 0x5de0, 0x40), 1), success)mstore(0x5e40, mload(0x5d60))                    mstore(0x5e60, mload(0x5d80))mstore(0x5e80, mload(0x5de0))                    mstore(0x5ea0, mload(0x5e00))success := and(eq(staticcall(gas(), 0x6, 0x5e40, 0x80, 0x5e40, 0x40), 1), success)mstore(0x5ec0, mload(0x5c0))                    mstore(0x5ee0, mload(0x5e0))mstore(0x5f00, mload(0x4300))success := and(eq(staticcall(gas(), 0x7, 0x5ec0, 0x60, 0x5ec0, 0x40), 1), success)mstore(0x5f20, mload(0x5e40))                    mstore(0x5f40, mload(0x5e60))mstore(0x5f60, mload(0x5ec0))                    mstore(0x5f80, mload(0x5ee0))success := and(eq(staticcall(gas(), 0x6, 0x5f20, 0x80, 0x5f20, 0x40), 1), success)mstore(0x5fa0, mload(0x600))                    mstore(0x5fc0, mload(0x620))mstore(0x5fe0, mload(0x4320))success := and(eq(staticcall(gas(), 0x7, 0x5fa0, 0x60, 0x5fa0, 0x40), 1), success)mstore(0x6000, mload(0x5f20))                    mstore(0x6020, mload(0x5f40))mstore(0x6040, mload(0x5fa0))                    mstore(0x6060, mload(0x5fc0))success := and(eq(staticcall(gas(), 0x6, 0x6000, 0x80, 0x6000, 0x40), 1), success)mstore(0x6080, mload(0x640))                    mstore(0x60a0, mload(0x660))mstore(0x60c0, mload(0x4340))success := and(eq(staticcall(gas(), 0x7, 0x6080, 0x60, 0x6080, 0x40), 1), success)mstore(0x60e0, mload(0x6000))                    mstore(0x6100, mload(0x6020))mstore(0x6120, mload(0x6080))                    mstore(0x6140, mload(0x60a0))success := and(eq(staticcall(gas(), 0x6, 0x60e0, 0x80, 0x60e0, 0x40), 1), success)mstore(0x6160, mload(0x4e0))                    mstore(0x6180, mload(0x500))mstore(0x61a0, mload(0x4360))success := and(eq(staticcall(gas(), 0x7, 0x6160, 0x60, 0x6160, 0x40), 1), success)mstore(0x61c0, mload(0x60e0))                    mstore(0x61e0, mload(0x6100))mstore(0x6200, mload(0x6160))                    mstore(0x6220, mload(0x6180))success := and(eq(staticcall(gas(), 0x6, 0x61c0, 0x80, 0x61c0, 0x40), 1), success)mstore(0x6240, mload(0xba0))                    mstore(0x6260, mload(0xbc0))mstore(0x6280, mload(0x4800))success := and(eq(staticcall(gas(), 0x7, 0x6240, 0x60, 0x6240, 0x40), 1), success)mstore(0x62a0, mload(0x61c0))                    mstore(0x62c0, mload(0x61e0))mstore(0x62e0, mload(0x6240))                    mstore(0x6300, mload(0x6260))success := and(eq(staticcall(gas(), 0x6, 0x62a0, 0x80, 0x62a0, 0x40), 1), success)mstore(0x6320, mload(0xbe0))                    mstore(0x6340, mload(0xc00))mstore(0x6360, mload(0x4840))success := and(eq(staticcall(gas(), 0x7, 0x6320, 0x60, 0x6320, 0x40), 1), success)mstore(0x6380, mload(0x62a0))                    mstore(0x63a0, mload(0x62c0))mstore(0x63c0, mload(0x6320))                    mstore(0x63e0, mload(0x6340))success := and(eq(staticcall(gas(), 0x6, 0x6380, 0x80, 0x6380, 0x40), 1), success)mstore(0x6400, mload(0xc20))                    mstore(0x6420, mload(0xc40))mstore(0x6440, mload(0x4880))success := and(eq(staticcall(gas(), 0x7, 0x6400, 0x60, 0x6400, 0x40), 1), success)mstore(0x6460, mload(0x6380))                    mstore(0x6480, mload(0x63a0))mstore(0x64a0, mload(0x6400))                    mstore(0x64c0, mload(0x6420))success := and(eq(staticcall(gas(), 0x6, 0x6460, 0x80, 0x6460, 0x40), 1), success)mstore(0x64e0, mload(0xc60))                    mstore(0x6500, mload(0xc80))mstore(0x6520, mload(0x48c0))success := and(eq(staticcall(gas(), 0x7, 0x64e0, 0x60, 0x64e0, 0x40), 1), success)mstore(0x6540, mload(0x6460))                    mstore(0x6560, mload(0x6480))mstore(0x6580, mload(0x64e0))                    mstore(0x65a0, mload(0x6500))success := and(eq(staticcall(gas(), 0x6, 0x6540, 0x80, 0x6540, 0x40), 1), success)mstore(0x65c0, mload(0xbe0))                    mstore(0x65e0, mload(0xc00))mstore(0x6600, mload(0x4440))success := and(eq(staticcall(gas(), 0x7, 0x65c0, 0x60, 0x65c0, 0x40), 1), success)mstore(0x6620, mload(0xba0))                    mstore(0x6640, mload(0xbc0))mstore(0x6660, mload(0x65c0))                    mstore(0x6680, mload(0x65e0))success := and(eq(staticcall(gas(), 0x6, 0x6620, 0x80, 0x6620, 0x40), 1), success)mstore(0x66a0, mload(0xc20))                    mstore(0x66c0, mload(0xc40))mstore(0x66e0, mload(0x4620))success := and(eq(staticcall(gas(), 0x7, 0x66a0, 0x60, 0x66a0, 0x40), 1), success)mstore(0x6700, mload(0x6620))                    mstore(0x6720, mload(0x6640))mstore(0x6740, mload(0x66a0))                    mstore(0x6760, mload(0x66c0))success := and(eq(staticcall(gas(), 0x6, 0x6700, 0x80, 0x6700, 0x40), 1), success)mstore(0x6780, mload(0xc60))                    mstore(0x67a0, mload(0xc80))mstore(0x67c0, mload(0x4780))success := and(eq(staticcall(gas(), 0x7, 0x6780, 0x60, 0x6780, 0x40), 1), success)mstore(0x67e0, mload(0x6700))                    mstore(0x6800, mload(0x6720))mstore(0x6820, mload(0x6780))                    mstore(0x6840, mload(0x67a0))success := and(eq(staticcall(gas(), 0x6, 0x67e0, 0x80, 0x67e0, 0x40), 1), success)mstore(0x6860, mload(0x6540))                    mstore(0x6880, mload(0x6560))mstore(0x68a0, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)            mstore(0x68c0, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)            mstore(0x68e0, 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)            mstore(0x6900, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)mstore(0x6920, mload(0x67e0))                    mstore(0x6940, mload(0x6800))mstore(0x6960, 0x186282957db913abd99f91db59fe69922e95040603ef44c0bd7aa3adeef8f5ac)            mstore(0x6980, 0x17944351223333f260ddc3b4af45191b856689eda9eab5cbcddbbe570ce860d2)            mstore(0x69a0, 0x06d971ff4a7467c3ec596ed6efc674572e32fd6f52b721f97e35b0b3d3546753)            mstore(0x69c0, 0x06ecdb9f9567f59ed2eee36e1e1d58797fd13cc97fafc2910f5e8a12f202fa9a)success := and(eq(staticcall(gas(), 0x8, 0x6860, 0x180, 0x6860, 0x20), 1), success)success := and(eq(mload(0x6860), 1), success)} return success; } }
